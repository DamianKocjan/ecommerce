// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Include binary targets for the native platform, as well as the platform for docker:
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  // previewFeatures = ["filterJson", "fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Attributes
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Relations
  accounts           Account[]
  sessions           Session[]
  orders             Order[]
  wishlistedProducts Wishlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Attributes
  @@unique([identifier, token])
}

model Wishlist {
  id String @id @default(cuid())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Attributes
  @@unique([userId, productId])
  @@map("wishlists")
}

model Manufacturer {
  id               Int    @id @default(autoincrement())
  name             String @unique
  description      String
  country          String
  headquarters     String
  yearOfFoundation Int

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  // Attributes
  @@map("manufacturers")
}

model Color {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  // Attributes
  @@map("colors")
}

model Material {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  // Attributes
  @@map("materials")
}

model Pattern {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  // Attributes
  @@map("patterns")
}

model Cut {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  // Attributes
  @@map("cuts")
}

model Collection {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  season Season?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  // Attributes
  @@map("collections")
}

enum Season {
  SPRING
  SUMMER
  AUTUMN
  WINTER
  ALL
}

enum DeliveryType {
  STANDARD
  EXPRESS
}

model DeliveryOption {
  id          String       @id @default(cuid())
  type        DeliveryType @default(STANDARD)
  storePickup Boolean      @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  // Attributes
  @@map("deliveryOptions")
}

model Size {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  forCategories Category[]
  products      Product[]

  // Attributes
  @@map("sizes")
}

model Product {
  id           Int       @id @default(autoincrement())
  slug         String    @unique // This is the unique identifier for the product (e.g. "title-of-product-ID")
  title        String    @unique
  description  String
  price        Decimal   @db.Decimal(8, 2)
  discount     Decimal?  @db.Decimal(8, 2)
  quantity     Int
  activatiedAt DateTime?
  multipack    Boolean   @default(false)
  multipackQty Int       @default(1)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categories       Category[]
  coupons          Coupon[]
  orderItems       OrderItem[]
  manufacturerId   Int
  manufacturer     Manufacturer   @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  size             Size?          @relation(fields: [sizeId], references: [id])
  sizeId           Int?
  colors           Color[]
  materials        Material[]
  patterns         Pattern[]
  cuts             Cut[]
  collections      Collection[]
  season           Season?
  deliveryOptionId String
  deliveryOption   DeliveryOption @relation(fields: [deliveryOptionId], references: [id])
  wishlist         Wishlist[]

  // Attributes
  @@map("products")
}

model Category {
  id   Int    @id @default(autoincrement())
  slug String @unique
  name String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products         Product[]
  subcategories    Category[] @relation("subcategories")
  parentCategory   Category?  @relation("subcategories", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId Int?       @map("categoryId")
  sizes            Size[]

  // Attributes
  @@map("categories")
}

model FileUpload {
  id       String @id @default(uuid())
  filename String
  minetype String
  encoding String
  url      String @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Attributes
  @@map("file_uploads")
}

model Coupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(255)
  description String
  active      Boolean  @default(true)
  value       Decimal  @db.Decimal(8, 2)
  isPercent   Boolean  @default(false)
  multiple    Boolean  @default(false)
  maxUses     Int?
  uses        Int      @default(0)
  startDate   DateTime
  endDate     DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  order     Order[]

  // Attributes
  @@map("coupons")
}

model Order {
  id    String  @id @default(uuid())
  total Decimal @db.Decimal(8, 2)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  coupon   Coupon?     @relation(fields: [couponId], references: [id])
  couponId Int?
  user     User        @relation(fields: [userId], references: [id])
  userId   String
  items    OrderItem[]

  // Attributes
  @@map("orders")
}

model OrderItem {
  id       String  @id @default(uuid())
  price    Decimal @db.Decimal(8, 2)
  quantity Int

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  // Attributes
  @@map("orderItems")
}
